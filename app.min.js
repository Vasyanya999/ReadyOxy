function headerScroll(){let e=document.querySelector(".header");const t=window.matchMedia("(min-width: 779.999px)");window.addEventListener("scroll",(()=>{document.documentElement.scrollTop>40&&t.matches?e.classList.add("_active"):e.classList.remove("_active")}))}function headerMenu(){const e=document.querySelector(".menu__btn-burger"),t=document.querySelector(".menu__body");e&&e.addEventListener("click",(()=>{document.body.classList.toggle("_lock"),e.classList.toggle("_active"),t.classList.toggle("_active")}));const c=window.matchMedia("(min-width:779.999px)");c.addEventListener("change",(()=>{c.matches&&(document.body.classList.remove("_lock"),e.classList.remove("_active"),t.classList.remove("_active"))}));const o=document.querySelectorAll("[data-goto]");if(o.length>0){o.forEach((c=>{c.addEventListener("click",(o=>{!function(c,o){const s=document.querySelector(c.dataset.goto);e.classList.contains("_active")&&(document.body.classList.remove("_lock"),e.classList.remove("_active"),t.classList.remove("_active"));if(c.dataset.goto&&s){const e=50,t=s.getBoundingClientRect().top+window.pageYOffset-e;window.scrollTo({top:t,behavior:"smooth"}),o.preventDefault()}}(c,o)}))}))}}function slider(){const e=document.querySelector(".slider__arrow-left"),t=document.querySelector(".slider__arrow-right"),c=document.querySelector(".slider__content"),o=document.querySelectorAll(".slider__slide"),s=document.querySelectorAll(".slider__controls-circle");let n=0,i=100*(o.length-1);function l(e){n=e,c.style.marginLeft=`-${e}%`}function r(){s.forEach((e=>{e.classList.remove("-active")}))}function a(e){console.log(e),r(),s[e].classList.add("-active")}s.forEach(((e,t)=>{e.addEventListener("click",(()=>{r(),e.classList.add("-active"),l(100*t)}))})),e.addEventListener("click",(()=>{n-=100,l(n),n<0?(n=i,l(n),a(n/100)):a(n/100)})),t.addEventListener("click",(()=>{n+=100,l(n),n>i?(n=0,l(n),a(n/100)):a(n/100)}))}headerScroll(),headerMenu(),slider();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlYWRlci5qcyIsIm1lbnUuanMiLCJzbGlkZXIuanMiXSwibmFtZXMiOlsiaGVhZGVyU2Nyb2xsIiwiaGVhZGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibWVkaWFRdWVyeSIsIndpbmRvdyIsIm1hdGNoTWVkaWEiLCJhZGRFdmVudExpc3RlbmVyIiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwibWF0Y2hlcyIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImhlYWRlck1lbnUiLCJidG5CdXJnZXJNZW51IiwiYm9keU1lbnUiLCJib2R5IiwidG9nZ2xlIiwibWVkaWFRdWVyeUxpc3QiLCJtZW51TGlua3NFbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW5ndGgiLCJmb3JFYWNoIiwibWVudUxpbmsiLCJldmVudCIsImdvdG9TZWN0aW9uRWxlbWVudCIsImRhdGFzZXQiLCJnb3RvIiwiY29udGFpbnMiLCJkZWNvcmF0aW9uVG9wSW5kZW50IiwiZ290b1NlY3Rpb25WYWx1ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG8iLCJiZWhhdmlvciIsInByZXZlbnREZWZhdWx0Iiwib25NZW51TGlua0NsaWNrIiwic2xpZGVyIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsImNvbnRlbnQiLCJzbGlkZXMiLCJjb250cm9sc0NpcmNsZSIsInN0YXJ0aW5nUG9zaXRpb24iLCJudW1iZXJTbGlkZSIsImNvbnRlbnRNYXJnaW5MZWZ0IiwibnVtYmVyIiwic3R5bGUiLCJtYXJnaW5MZWZ0IiwiY2xlYXJDbGFzc0NpcmNsZSIsImNpcmNsZSIsImFkZENsYXNzQ2lyY2xlIiwiaW5kZXgiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFBQSxlQUNBLElBQUFDLEVBQUFDLFNBQUFDLGNBQUEsV0FDQSxNQUFBQyxFQUFBQyxPQUFBQyxXQUFBLDBCQUNBRCxPQUFBRSxpQkFBQSxVQUFBLEtBQ0FMLFNBQUFNLGdCQUFBQyxVQUFBLElBQUFMLEVBQUFNLFFBQ0FULEVBQUFVLFVBQUFDLElBQUEsV0FFQVgsRUFBQVUsVUFBQUUsT0FBQSxjQ0pBLFNBQUFDLGFBQ0EsTUFBQUMsRUFBQWIsU0FBQUMsY0FBQSxxQkFDQWEsRUFBQWQsU0FBQUMsY0FBQSxlQUNBWSxHQUNBQSxFQUFBUixpQkFBQSxTQUFBLEtBQ0FMLFNBQUFlLEtBQUFOLFVBQUFPLE9BQUEsU0FDQUgsRUFBQUosVUFBQU8sT0FBQSxXQUNBRixFQUFBTCxVQUFBTyxPQUFBLGNBR0EsTUFDQUMsRUFBQWQsT0FBQUMsV0FEQSx5QkFFQWEsRUFBQVosaUJBQUEsVUFBQSxLQUNBWSxFQUFBVCxVQUNBUixTQUFBZSxLQUFBTixVQUFBRSxPQUFBLFNBQ0FFLEVBQUFKLFVBQUFFLE9BQUEsV0FDQUcsRUFBQUwsVUFBQUUsT0FBQSxlQUlBLE1BQUFPLEVBQUFsQixTQUFBbUIsaUJBQUEsZUFDQSxHQUFBRCxFQUFBRSxPQUFBLEVBQUEsQ0FDQUYsRUFBQUcsU0FBQUMsSUFDQUEsRUFBQWpCLGlCQUFBLFNBQUFrQixLQUlBLFNBQUFELEVBQUFDLEdBRUEsTUFBQUMsRUFBQXhCLFNBQUFDLGNBQUFxQixFQUFBRyxRQUFBQyxNQUVBYixFQUFBSixVQUFBa0IsU0FBQSxhQUNBM0IsU0FBQWUsS0FBQU4sVUFBQUUsT0FBQSxTQUNBRSxFQUFBSixVQUFBRSxPQUFBLFdBQ0FHLEVBQUFMLFVBQUFFLE9BQUEsWUFHQSxHQUFBVyxFQUFBRyxRQUFBQyxNQUFBRixFQUFBLENBQ0EsTUFBQUksRUFBQSxHQUVBQyxFQUFBTCxFQUFBTSx3QkFBQUMsSUFBQTVCLE9BQUE2QixZQUFBSixFQUVBekIsT0FBQThCLFNBQUEsQ0FDQUYsSUFBQUYsRUFDQUssU0FBQSxXQUVBWCxFQUFBWSxrQkF0QkFDLENBQUFkLEVBQUFDLFVDM0JBLFNBQUFjLFNBQ0EsTUFBQUMsRUFBQXRDLFNBQUFDLGNBQUEsdUJBQ0FzQyxFQUFBdkMsU0FBQUMsY0FBQSx3QkFDQXVDLEVBQUF4QyxTQUFBQyxjQUFBLG9CQUNBd0MsRUFBQXpDLFNBQUFtQixpQkFBQSxrQkFDQXVCLEVBQUExQyxTQUFBbUIsaUJBQUEsNEJBRUEsSUFBQXdCLEVBQUEsRUFDQUMsRUFBQSxLQUFBSCxFQUFBckIsT0FBQSxHQUVBLFNBQUF5QixFQUFBQyxHQUNBSCxFQUFBRyxFQUNBTixFQUFBTyxNQUFBQyxXQUFBLElBQUFGLEtBMENBLFNBQUFHLElBQ0FQLEVBQUFyQixTQUFBNkIsSUFDQUEsRUFBQXpDLFVBQUFFLE9BQUEsY0FJQSxTQUFBd0MsRUFBQUMsR0FDQUMsUUFBQUMsSUFBQUYsR0FDQUgsSUFDQVAsRUFBQVUsR0FBQTNDLFVBQUFDLElBQUEsV0FuQkFnQyxFQUFBckIsU0FBQSxDQUFBNkIsRUFBQUUsS0FDQUYsRUFBQTdDLGlCQUFBLFNBQUEsS0FDQTRDLElBQ0FDLEVBQUF6QyxVQUFBQyxJQUFBLFdBRUFtQyxFQURBLElBQUEsU0FoQ0FQLEVBQUFqQyxpQkFBQSxTQUFBLEtBQ0FzQyxHQUFBLElBQ0FFLEVBQUFGLEdBRUFBLEVBQUEsR0FDQUEsRUFBQUMsRUFDQUMsRUFBQUYsR0FDQVEsRUFBQVIsRUFBQSxNQUdBUSxFQUFBUixFQUFBLFFBR0FKLEVBQUFsQyxpQkFBQSxTQUFBLEtBQ0FzQyxHQUFBLElBQ0FFLEVBQUFGLEdBRUFBLEVBQUFDLEdBQ0FELEVBQUEsRUFDQUUsRUFBQUYsR0FDQVEsRUFBQVIsRUFBQSxNQUVBUSxFQUFBUixFQUFBLFFGMUJBN0MsZUMwQ0FjLGFDaUJBeUIiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGhlYWRlclNjcm9sbCgpIHtcclxuICBsZXQgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpXHJcbiAgY29uc3QgbWVkaWFRdWVyeSA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA3NzkuOTk5cHgpJylcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG4gICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPiA0MCAmJiBtZWRpYVF1ZXJ5Lm1hdGNoZXMpIHtcclxuICAgICAgaGVhZGVyLmNsYXNzTGlzdC5hZGQoJ19hY3RpdmUnKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKVxyXG4gICAgfVxyXG4gIH0pXHJcbn1cclxuXHJcbmhlYWRlclNjcm9sbCgpIiwiLy8gZnVuY3Rpb24gaXNNb2JpbGUoKSB7XHJcbi8vICAgcmV0dXJuIC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuLy8gfVxyXG5mdW5jdGlvbiBoZWFkZXJNZW51KCkge1xyXG4gIGNvbnN0IGJ0bkJ1cmdlck1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudV9fYnRuLWJ1cmdlcicpXHJcbiAgY29uc3QgYm9keU1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudV9fYm9keScpXHJcbiAgaWYgKGJ0bkJ1cmdlck1lbnUpIHtcclxuICAgIGJ0bkJ1cmdlck1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnX2xvY2snKVxyXG4gICAgICBidG5CdXJnZXJNZW51LmNsYXNzTGlzdC50b2dnbGUoJ19hY3RpdmUnKVxyXG4gICAgICBib2R5TWVudS5jbGFzc0xpc3QudG9nZ2xlKCdfYWN0aXZlJylcclxuICAgIH0pXHJcbiAgfVxyXG4gIGNvbnN0IG1lZGlhUXVlcnkgPSAnKG1pbi13aWR0aDo3NzkuOTk5cHgpJztcclxuICBjb25zdCBtZWRpYVF1ZXJ5TGlzdCA9IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhUXVlcnkpO1xyXG4gIG1lZGlhUXVlcnlMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcclxuICAgIGlmIChtZWRpYVF1ZXJ5TGlzdC5tYXRjaGVzKSB7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnX2xvY2snKVxyXG4gICAgICBidG5CdXJnZXJNZW51LmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKVxyXG4gICAgICBib2R5TWVudS5jbGFzc0xpc3QucmVtb3ZlKCdfYWN0aXZlJylcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBjb25zdCBtZW51TGlua3NFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWdvdG9dJyk7XHJcbiAgaWYgKG1lbnVMaW5rc0VsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgIG1lbnVMaW5rc0VsZW1lbnRzLmZvckVhY2gobWVudUxpbmsgPT4ge1xyXG4gICAgICBtZW51TGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgb25NZW51TGlua0NsaWNrKG1lbnVMaW5rLCBldmVudClcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIG9uTWVudUxpbmtDbGljayhtZW51TGluaywgZXZlbnQpIHtcclxuXHJcbiAgICAgIGNvbnN0IGdvdG9TZWN0aW9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWVudUxpbmsuZGF0YXNldC5nb3RvKTtcclxuXHJcbiAgICAgIGlmIChidG5CdXJnZXJNZW51LmNsYXNzTGlzdC5jb250YWlucyhcIl9hY3RpdmVcIikpIHtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJfbG9ja1wiKTtcclxuICAgICAgICBidG5CdXJnZXJNZW51LmNsYXNzTGlzdC5yZW1vdmUoXCJfYWN0aXZlXCIpO1xyXG4gICAgICAgIGJvZHlNZW51LmNsYXNzTGlzdC5yZW1vdmUoXCJfYWN0aXZlXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobWVudUxpbmsuZGF0YXNldC5nb3RvICYmIGdvdG9TZWN0aW9uRWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGRlY29yYXRpb25Ub3BJbmRlbnQgPSA1MDtcclxuXHJcbiAgICAgICAgY29uc3QgZ290b1NlY3Rpb25WYWx1ZSA9IGdvdG9TZWN0aW9uRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgLSBkZWNvcmF0aW9uVG9wSW5kZW50O1xyXG5cclxuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oe1xyXG4gICAgICAgICAgdG9wOiBnb3RvU2VjdGlvblZhbHVlLFxyXG4gICAgICAgICAgYmVoYXZpb3I6IFwic21vb3RoXCJcclxuICAgICAgICB9KTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbmhlYWRlck1lbnUoKVxyXG5cclxuIiwiZnVuY3Rpb24gc2xpZGVyKCkge1xyXG4gIGNvbnN0IGFycm93TGVmdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXJfX2Fycm93LWxlZnQnKTtcclxuICBjb25zdCBhcnJvd1JpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fYXJyb3ctcmlnaHQnKTtcclxuICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fY29udGVudCcpO1xyXG4gIGNvbnN0IHNsaWRlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZXJfX3NsaWRlJylcclxuICBjb25zdCBjb250cm9sc0NpcmNsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZXJfX2NvbnRyb2xzLWNpcmNsZScpXHJcblxyXG4gIGxldCBzdGFydGluZ1Bvc2l0aW9uID0gMDtcclxuICBsZXQgbnVtYmVyU2xpZGUgPSAoc2xpZGVzLmxlbmd0aCAtIDEpICogMTAwO1xyXG5cclxuICBmdW5jdGlvbiBjb250ZW50TWFyZ2luTGVmdChudW1iZXIpIHtcclxuICAgIHN0YXJ0aW5nUG9zaXRpb24gPSBudW1iZXJcclxuICAgIGNvbnRlbnQuc3R5bGUubWFyZ2luTGVmdCA9IGAtJHtudW1iZXJ9JWA7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzbGlkZXJBcnJvd3MoKSB7XHJcbiAgICBhcnJvd0xlZnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIHN0YXJ0aW5nUG9zaXRpb24gLT0gMTAwO1xyXG4gICAgICBjb250ZW50TWFyZ2luTGVmdChzdGFydGluZ1Bvc2l0aW9uKVxyXG5cclxuICAgICAgaWYgKHN0YXJ0aW5nUG9zaXRpb24gPCAwKSB7XHJcbiAgICAgICAgc3RhcnRpbmdQb3NpdGlvbiA9IG51bWJlclNsaWRlO1xyXG4gICAgICAgIGNvbnRlbnRNYXJnaW5MZWZ0KHN0YXJ0aW5nUG9zaXRpb24pXHJcbiAgICAgICAgYWRkQ2xhc3NDaXJjbGUoc3RhcnRpbmdQb3NpdGlvbiAvIDEwMClcclxuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYWRkQ2xhc3NDaXJjbGUoc3RhcnRpbmdQb3NpdGlvbiAvIDEwMClcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIGFycm93UmlnaHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIHN0YXJ0aW5nUG9zaXRpb24gKz0gMTAwO1xyXG4gICAgICBjb250ZW50TWFyZ2luTGVmdChzdGFydGluZ1Bvc2l0aW9uKVxyXG5cclxuICAgICAgaWYgKHN0YXJ0aW5nUG9zaXRpb24gPiBudW1iZXJTbGlkZSkge1xyXG4gICAgICAgIHN0YXJ0aW5nUG9zaXRpb24gPSAwO1xyXG4gICAgICAgIGNvbnRlbnRNYXJnaW5MZWZ0KHN0YXJ0aW5nUG9zaXRpb24pXHJcbiAgICAgICAgYWRkQ2xhc3NDaXJjbGUoc3RhcnRpbmdQb3NpdGlvbiAvIDEwMClcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhZGRDbGFzc0NpcmNsZShzdGFydGluZ1Bvc2l0aW9uIC8gMTAwKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2xpZGVyQ29udHJvbHMoKSB7XHJcbiAgICBjb250cm9sc0NpcmNsZS5mb3JFYWNoKChjaXJjbGUsIGluZGV4KSA9PiB7XHJcbiAgICAgIGNpcmNsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBjbGVhckNsYXNzQ2lyY2xlKCk7XHJcbiAgICAgICAgY2lyY2xlLmNsYXNzTGlzdC5hZGQoJy1hY3RpdmUnKTtcclxuICAgICAgICBsZXQgcG9zaXRpb24gPSAxMDAgKiAoaW5kZXgpXHJcbiAgICAgICAgY29udGVudE1hcmdpbkxlZnQocG9zaXRpb24pXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG5cclxuICB9XHJcbiAgZnVuY3Rpb24gY2xlYXJDbGFzc0NpcmNsZSgpIHtcclxuICAgIGNvbnRyb2xzQ2lyY2xlLmZvckVhY2goY2lyY2xlID0+IHtcclxuICAgICAgY2lyY2xlLmNsYXNzTGlzdC5yZW1vdmUoJy1hY3RpdmUnKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFkZENsYXNzQ2lyY2xlKGluZGV4KSB7XHJcbiAgICBjb25zb2xlLmxvZyhpbmRleCk7XHJcbiAgICBjbGVhckNsYXNzQ2lyY2xlKCk7XHJcbiAgICBjb250cm9sc0NpcmNsZVtpbmRleF0uY2xhc3NMaXN0LmFkZCgnLWFjdGl2ZScpO1xyXG4gIH1cclxuXHJcbiAgc2xpZGVyQ29udHJvbHMoKTtcclxuICBzbGlkZXJBcnJvd3MoKTtcclxufVxyXG5cclxuXHJcbnNsaWRlcigpOyJdfQ==